using PatientMonitorDataLogger.PhilipsIntellivue.Helpers;

namespace PatientMonitorDataLogger.PhilipsIntellivue.Models;

public class PresentationHeader
{
    public static readonly PresentationHeader Empty = new([]);

    private static readonly byte[] AssociationRequestPayload =
    [
        0x31, 0x80, 0xA0, 0x80, 0x80, 0x01,
        0x01, 0x00, 0x00, 0xA2, 0x80, 0xA0, 0x03, 0x00,
        0x00, 0x01, 0xA4, 0x80, 0x30, 0x80, 0x02, 0x01,
        0x01, 0x06, 0x04, 0x52, 0x01, 0x00, 0x01, 0x30,
        0x80, 0x06, 0x02, 0x51, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x30, 0x80, 0x02, 0x01, 0x02, 0x06, 0x0C,
        0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x30, 0x80, 0x06, 0x0C,
        0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00,
        0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01,
        0x01, 0xA0, 0x80, 0x60, 0x80, 0xA1, 0x80, 0x06,
        0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01,
        0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0xBE,
        0x80, 0x28, 0x80, 0x06, 0x0C, 0x2A, 0x86, 0x48,
        0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x02, 0x01, 0x02, 0x81
    ];
    public static PresentationHeader BuildForAssociationRequest(
        int userDataLength,
        int presentationTrailerLength)
    {
        var lengthIndicator = new LengthIndicator((ushort)(AssociationRequestPayload.Length + userDataLength + presentationTrailerLength));
        var lengthIndictorBytes = lengthIndicator.Serialize();
        return new(
        [
            0xC1, ..lengthIndictorBytes, ..AssociationRequestPayload
        ]);
    }

    private static readonly byte[] AssociationResponsePayload =
    [
        0x31, 0x80, 0xA0, 0x80, 0x80, 0x01,
        0x01, 0x00, 0x00, 0xA2, 0x80, 0xA0, 0x03, 0x00,
        0x00, 0x01, 0xA5, 0x80, 0x30, 0x80, 0x80, 0x01,
        0x00, 0x81, 0x02, 0x51, 0x01, 0x00, 0x00, 0x30,
        0x80, 0x80, 0x01, 0x00, 0x81, 0x0C, 0x2A, 0x86,
        0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00,
        0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x61, 0x80,
        0x30, 0x80, 0x02, 0x01, 0x01, 0xA0, 0x80, 0x61,
        0x80, 0xA1, 0x80, 0x06, 0x0C, 0x2A, 0x86, 0x48,
        0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03,
        0x01, 0x00, 0x00, 0xA2, 0x03, 0x02, 0x01, 0x00,
        0xA3, 0x05, 0xA1, 0x03, 0x02, 0x01, 0x00, 0xBE,
        0x80, 0x28, 0x80, 0x02, 0x01, 0x02, 0x81
    ];
    public static PresentationHeader BuildForAssociationResponse(
        int userDataLength,
        int presentationTrailerLength)
    {
        var lengthIndicator = new LengthIndicator((ushort)(AssociationResponsePayload.Length + userDataLength + presentationTrailerLength));
        var lengthIndictorBytes = lengthIndicator.Serialize();
        return new(
        [
            0xC1, ..lengthIndictorBytes, ..AssociationResponsePayload
        ]);
    }
    public static readonly PresentationHeader ReleaseRequest = new(
    [
        0xC1, 0x16, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01,
        0x01, 0xA0, 0x80, 0x62, 0x80, 0x80, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00
    ]);
    public static readonly PresentationHeader ReleaseResponse = new(
    [
        0xC1, 0x16, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01,
        0x01, 0xA0, 0x80, 0x63, 0x80, 0x80, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00
    ]);
    public static readonly PresentationHeader AssociationAbort = new(
    [
        0xC1, 0x29, 0xA0, 0x80, 0xA0, 0x80, 0x30, 0x80,
        0x02, 0x01, 0x01, 0x06, 0x02, 0x51, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x61, 0x80, 0x30, 0x80, 0x02,
        0x01, 0x01, 0xA0, 0x80, 0x64, 0x80, 0x80, 0x01,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]);

    public PresentationHeader(
        byte[] payload)
    {
        Payload = payload;
    }

    public byte[] Payload { get; }
    public int Length => Payload.Length;

    public byte[] Serialize() => Payload;

    public static PresentationHeader Read(
        Stream stream,
        SessionHeader sessionHeader)
    {
        switch (sessionHeader.Type)
        {
            case AssociationCommandType.RequestAssociation:
            {
                var c1 = (byte)stream.ReadByte();
                var length = LengthIndicator.Read(stream);
                var bufferLength = AssociationRequestPayload.Length;
                var buffer = new byte[bufferLength];
                StreamHelpers.ReadExactLengthOrThrow(stream, buffer, 0, bufferLength);
                return new([ c1, ..length.Serialize(), ..buffer]);
            }
            case AssociationCommandType.AssociationAccepted:
            {
                var c1 = (byte)stream.ReadByte();
                var length = LengthIndicator.Read(stream);
                var bufferLength = AssociationResponsePayload.Length;
                var buffer = new byte[bufferLength];
                StreamHelpers.ReadExactLengthOrThrow(stream, buffer, 0, bufferLength);
                return new([ c1, ..length.Serialize(), ..buffer]);
            }
            default:
            {
                var bufferLength = sessionHeader.Type switch
                {
                    AssociationCommandType.Refuse => Empty.Length,
                    AssociationCommandType.RequestRelease => ReleaseRequest.Length,
                    AssociationCommandType.Released => ReleaseResponse.Length,
                    AssociationCommandType.Abort => AssociationAbort.Length,
                    _ => throw new ArgumentOutOfRangeException(nameof(sessionHeader.Type))
                };
                if (bufferLength == 0)
                    return new([]);
                var buffer = new byte[bufferLength];
                StreamHelpers.ReadExactLengthOrThrow(stream, buffer, 0, bufferLength);
                return new(buffer);
            }
        }
    }
}